{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no contactList\n",
      "未获取applist\n",
      "no contactList\n",
      "no contactList\n",
      "no contactList\n",
      "no contactList\n",
      "no contactList\n",
      "no contactList\n",
      "no contactList\n",
      "no contactList\n",
      "no contactList\n",
      "no contactList\n",
      "特征工程成功\n",
      "yes\n",
      "run time: 0.00 min 58.03 s\n"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "import time\n",
    "from threading import Timer\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings('ignore')\n",
    "import os\n",
    "import sys\n",
    "sys.path.append('/home/llw/code/update/')\n",
    "import logging\n",
    "import logging.handlers\n",
    "from sqlalchemy import create_engine\n",
    "from bmqb.feature_engineer import *\n",
    "from model_package import logit_ensemble, get_features, model_xgb\n",
    "\n",
    "# 原始数据\n",
    "path1 = \"/home/baowu/code/model/synthesis/feature_bw_all.csv\"\n",
    "# 全期特征的logit参数\n",
    "path2 = \"/home/llw/model_file/logit/params_all.csv\"\n",
    "# 6月-9月特征的logit参数\n",
    "path3 = \"/home/llw/model_file/logit/params_part.csv\"\n",
    "# 6月-9月的uid文件\n",
    "path4 = \"/home/llw/model_file/logit/features_sas.csv\"\n",
    "# 日志文件\n",
    "LOG_FILE = '/home/heyang/model_test.log'\n",
    "\n",
    "# 开始时间\n",
    "startDate = datetime.timedelta(days=10)\n",
    "# 数据库导出的表名称\n",
    "db_sheet = 'model_1.1'\n",
    "# 处理数据时，为防止数据不同步（91查出来了，芝麻还没查出来等等），设置的线程延时处理（单位为秒）\n",
    "timer_feature_engineer = 10  # 单位s\n",
    "# 每隔多长时间检测一下新数据\n",
    "data_catch_interval = 10  # 单位分钟\n",
    "handler = logging.handlers.RotatingFileHandler(LOG_FILE, maxBytes=1024 * 1024, backupCount=5)  # 实例化handler\n",
    "fmt = '%(asctime)s - %(filename)s:%(lineno)s - %(name)s - %(message)s'\n",
    "formatter = logging.Formatter(fmt)  # 实例化formatter\n",
    "handler.setFormatter(formatter)  # 为handler添加formatter\n",
    "logger = logging.getLogger('llw')  # 获取名为tst的logger\n",
    "logger.addHandler(handler)  # 为logger添加handler\n",
    "logger.setLevel(logging.DEBUG)\n",
    "\n",
    "# features = get_features.get_features_part(传入dataframe)%输出在6月到9月之间的特征\n",
    "if os.path.exists(path2) == False:\n",
    "    features = pd.read_csv(path1, index_col=None)\n",
    "    uid = pd.read_csv(path4, index_col=None)\n",
    "    features2 = get_features.get_features_all(features)\n",
    "    features2 = pd.merge(features2, features[['uid', 'label']], how='inner', on='uid')\n",
    "    print(features2.shape)\n",
    "    params_all = logit_ensemble.get_params(features2)  # 此步骤会打印模型ks和auc值，输出ks+auc最高的模型参数\n",
    "    params_all.to_csv(path2, index=None)\n",
    "    del features2\n",
    "    del features\n",
    "    del uid\n",
    "else:\n",
    "    params_all = pd.read_csv(path2, index_col=None)\n",
    "logger.info('succeed loading para model1!')\n",
    "if os.path.exists(path3) == False:\n",
    "    features = pd.read_csv(path1, index_col=None)\n",
    "    uid = pd.read_csv(path4, index_col=None)\n",
    "    features3 = get_features.get_features_part(features)\n",
    "    features3 = pd.merge(features3, features[['uid', 'label']], how='inner', on='uid')\n",
    "    print(features3.shape)\n",
    "    features3 = pd.merge(uid[['uid']], features3, how='left', on='uid')\n",
    "    print(features3.shape)\n",
    "    params_part = logit_ensemble.get_params(features3)  # 此步骤会打印模型ks和auc值，输出ks+auc最高的模型参数\n",
    "    params_part.to_csv(path3, index=None)\n",
    "    del features3\n",
    "    del features\n",
    "    del uid\n",
    "else:\n",
    "    params_part = pd.read_csv(path3, index_col=None)\n",
    "\n",
    "logger.info('succeed loading para model2!')\n",
    "\n",
    "def run_Task(uid):\n",
    "    try:\n",
    "        u = model(uid)\n",
    "        data = u.features\n",
    "        logger.info('succeed: feature engineering')\n",
    "    except:\n",
    "        logger.debug('mistake: feature engineering')\n",
    "        return\n",
    "    try:\n",
    "        data.to_csv('data_tmp.csv', index=None)\n",
    "        data = pd.read_csv('data_tmp.csv', index_col=None)\n",
    "        logger.info('succeed: transform object to ndarray')\n",
    "    except:\n",
    "        logger.debug('mistake: transform object to ndarray')\n",
    "        return\n",
    "    try:\n",
    "        features_logit_all = get_features.get_features_all(data)  # 输出在所有时间段内的特征\n",
    "        features_logit_part = get_features.get_features_part(data)  # 输出在6月到9月之间的特征\n",
    "    except:\n",
    "        logger.debug('mistake: woe transform')\n",
    "        return\n",
    "    try:\n",
    "        logit_score_all = logit_ensemble.predict(features_logit_all, params_all)\n",
    "        logit_score_part = logit_ensemble.predict(features_logit_part, params_part)\n",
    "        df = data[['uid']]\n",
    "        df['updatedAt'] = [datetime.datetime.now() for i in range(len(data))]\n",
    "        df['logit_part_time'] = list(logit_score_part['score'])\n",
    "        df['logit_all_time'] = list(logit_score_all['score'])\n",
    "    except:\n",
    "        logger.debug('mistake: logit')\n",
    "        return\n",
    "    try:\n",
    "        logger.info('succeed: logit')\n",
    "        xgb_score = model_xgb.Three_cobblers(data)\n",
    "        xgb_score2 = model_xgb.xgb_single(data)\n",
    "        df = pd.merge(df, xgb_score, how='left', on='uid')\n",
    "        df.rename(columns = {\"score\":\"xgb_threeModel\"},inplace=True)\n",
    "        df = pd.merge(df, xgb_score2, how='left', on='uid')\n",
    "        df.rename(columns = {\"score\":\"xgb_singleModel\"},inplace=True)\n",
    "        logger.info('succeed: xgb')\n",
    "        return logit_score_all,logit_score_part,df\n",
    "    except:\n",
    "        logger.debug('mistake: xgb')\n",
    "        return\n",
    "\n",
    "uid_list = [436,1300,1938,3570,4202,4446,5008,5776,7572,8818,9032,9588,9893,9925,11188,11283,13291,14629,15630,16590,18837,19412,19800,19860,19863,19957,20293,21699,22345,22524]\n",
    "\n",
    "start = time.clock()\n",
    "a,b,c = run_Task(uid_list)\n",
    "end = time.clock()\n",
    "print(\"run time: %.2f min %.2f s\" % divmod((end - start), 60))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "c.to_csv('test.csv',index = None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid</th>\n",
       "      <th>updatedAt</th>\n",
       "      <th>logit_part_time</th>\n",
       "      <th>logit_all_time</th>\n",
       "      <th>xgb_threeModel</th>\n",
       "      <th>xgb_singleModel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>436</td>\n",
       "      <td>2018-01-09 11:50:09.130283</td>\n",
       "      <td>32</td>\n",
       "      <td>20</td>\n",
       "      <td>696</td>\n",
       "      <td>913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1300</td>\n",
       "      <td>2018-01-09 11:50:09.130290</td>\n",
       "      <td>6</td>\n",
       "      <td>34</td>\n",
       "      <td>928</td>\n",
       "      <td>971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1938</td>\n",
       "      <td>2018-01-09 11:50:09.130292</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>963</td>\n",
       "      <td>983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3570</td>\n",
       "      <td>2018-01-09 11:50:09.130294</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>898</td>\n",
       "      <td>969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4202</td>\n",
       "      <td>2018-01-09 11:50:09.130295</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>925</td>\n",
       "      <td>965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4446</td>\n",
       "      <td>2018-01-09 11:50:09.130297</td>\n",
       "      <td>13</td>\n",
       "      <td>8</td>\n",
       "      <td>816</td>\n",
       "      <td>932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>5008</td>\n",
       "      <td>2018-01-09 11:50:09.130299</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>843</td>\n",
       "      <td>935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5776</td>\n",
       "      <td>2018-01-09 11:50:09.130301</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>847</td>\n",
       "      <td>956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>7572</td>\n",
       "      <td>2018-01-09 11:50:09.130303</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>739</td>\n",
       "      <td>894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>8818</td>\n",
       "      <td>2018-01-09 11:50:09.130305</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>723</td>\n",
       "      <td>874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>9032</td>\n",
       "      <td>2018-01-09 11:50:09.130307</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>909</td>\n",
       "      <td>983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>9588</td>\n",
       "      <td>2018-01-09 11:50:09.130309</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>795</td>\n",
       "      <td>943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>9893</td>\n",
       "      <td>2018-01-09 11:50:09.130310</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>875</td>\n",
       "      <td>945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>9925</td>\n",
       "      <td>2018-01-09 11:50:09.130312</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>798</td>\n",
       "      <td>919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>11188</td>\n",
       "      <td>2018-01-09 11:50:09.130314</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>774</td>\n",
       "      <td>921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>11283</td>\n",
       "      <td>2018-01-09 11:50:09.130316</td>\n",
       "      <td>67</td>\n",
       "      <td>20</td>\n",
       "      <td>539</td>\n",
       "      <td>731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>13291</td>\n",
       "      <td>2018-01-09 11:50:09.130318</td>\n",
       "      <td>47</td>\n",
       "      <td>100</td>\n",
       "      <td>693</td>\n",
       "      <td>906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>14629</td>\n",
       "      <td>2018-01-09 11:50:09.130320</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>957</td>\n",
       "      <td>985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>15630</td>\n",
       "      <td>2018-01-09 11:50:09.130322</td>\n",
       "      <td>48</td>\n",
       "      <td>97</td>\n",
       "      <td>722</td>\n",
       "      <td>822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>16590</td>\n",
       "      <td>2018-01-09 11:50:09.130323</td>\n",
       "      <td>3</td>\n",
       "      <td>67</td>\n",
       "      <td>868</td>\n",
       "      <td>952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>18837</td>\n",
       "      <td>2018-01-09 11:50:09.130325</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>571</td>\n",
       "      <td>826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>19412</td>\n",
       "      <td>2018-01-09 11:50:09.130327</td>\n",
       "      <td>13</td>\n",
       "      <td>16</td>\n",
       "      <td>596</td>\n",
       "      <td>755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>19800</td>\n",
       "      <td>2018-01-09 11:50:09.130329</td>\n",
       "      <td>6</td>\n",
       "      <td>25</td>\n",
       "      <td>795</td>\n",
       "      <td>930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>19860</td>\n",
       "      <td>2018-01-09 11:50:09.130330</td>\n",
       "      <td>28</td>\n",
       "      <td>44</td>\n",
       "      <td>768</td>\n",
       "      <td>917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>19863</td>\n",
       "      <td>2018-01-09 11:50:09.130332</td>\n",
       "      <td>14</td>\n",
       "      <td>27</td>\n",
       "      <td>769</td>\n",
       "      <td>915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>19957</td>\n",
       "      <td>2018-01-09 11:50:09.130334</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>889</td>\n",
       "      <td>965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>20293</td>\n",
       "      <td>2018-01-09 11:50:09.130336</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>746</td>\n",
       "      <td>923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>21699</td>\n",
       "      <td>2018-01-09 11:50:09.130337</td>\n",
       "      <td>22</td>\n",
       "      <td>2</td>\n",
       "      <td>756</td>\n",
       "      <td>922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>22345</td>\n",
       "      <td>2018-01-09 11:50:09.130339</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>846</td>\n",
       "      <td>962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>22524</td>\n",
       "      <td>2018-01-09 11:50:09.130341</td>\n",
       "      <td>9</td>\n",
       "      <td>26</td>\n",
       "      <td>836</td>\n",
       "      <td>928</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      uid                  updatedAt  logit_part_time  logit_all_time  \\\n",
       "0     436 2018-01-09 11:50:09.130283               32              20   \n",
       "1    1300 2018-01-09 11:50:09.130290                6              34   \n",
       "2    1938 2018-01-09 11:50:09.130292                0               0   \n",
       "3    3570 2018-01-09 11:50:09.130294                0               0   \n",
       "4    4202 2018-01-09 11:50:09.130295                1              10   \n",
       "5    4446 2018-01-09 11:50:09.130297               13               8   \n",
       "6    5008 2018-01-09 11:50:09.130299                1               2   \n",
       "7    5776 2018-01-09 11:50:09.130301                2               0   \n",
       "8    7572 2018-01-09 11:50:09.130303                0               4   \n",
       "9    8818 2018-01-09 11:50:09.130305                2               0   \n",
       "10   9032 2018-01-09 11:50:09.130307                1               1   \n",
       "11   9588 2018-01-09 11:50:09.130309                4               2   \n",
       "12   9893 2018-01-09 11:50:09.130310                2               0   \n",
       "13   9925 2018-01-09 11:50:09.130312                1              10   \n",
       "14  11188 2018-01-09 11:50:09.130314                2               2   \n",
       "15  11283 2018-01-09 11:50:09.130316               67              20   \n",
       "16  13291 2018-01-09 11:50:09.130318               47             100   \n",
       "17  14629 2018-01-09 11:50:09.130320                0               1   \n",
       "18  15630 2018-01-09 11:50:09.130322               48              97   \n",
       "19  16590 2018-01-09 11:50:09.130323                3              67   \n",
       "20  18837 2018-01-09 11:50:09.130325                3               1   \n",
       "21  19412 2018-01-09 11:50:09.130327               13              16   \n",
       "22  19800 2018-01-09 11:50:09.130329                6              25   \n",
       "23  19860 2018-01-09 11:50:09.130330               28              44   \n",
       "24  19863 2018-01-09 11:50:09.130332               14              27   \n",
       "25  19957 2018-01-09 11:50:09.130334                0               0   \n",
       "26  20293 2018-01-09 11:50:09.130336                0              22   \n",
       "27  21699 2018-01-09 11:50:09.130337               22               2   \n",
       "28  22345 2018-01-09 11:50:09.130339                0               2   \n",
       "29  22524 2018-01-09 11:50:09.130341                9              26   \n",
       "\n",
       "    xgb_threeModel  xgb_singleModel  \n",
       "0              696              913  \n",
       "1              928              971  \n",
       "2              963              983  \n",
       "3              898              969  \n",
       "4              925              965  \n",
       "5              816              932  \n",
       "6              843              935  \n",
       "7              847              956  \n",
       "8              739              894  \n",
       "9              723              874  \n",
       "10             909              983  \n",
       "11             795              943  \n",
       "12             875              945  \n",
       "13             798              919  \n",
       "14             774              921  \n",
       "15             539              731  \n",
       "16             693              906  \n",
       "17             957              985  \n",
       "18             722              822  \n",
       "19             868              952  \n",
       "20             571              826  \n",
       "21             596              755  \n",
       "22             795              930  \n",
       "23             768              917  \n",
       "24             769              915  \n",
       "25             889              965  \n",
       "26             746              923  \n",
       "27             756              922  \n",
       "28             846              962  \n",
       "29             836              928  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
